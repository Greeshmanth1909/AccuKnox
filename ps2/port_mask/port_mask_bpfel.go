// Code generated by bpf2go; DO NOT EDIT.
//go:build (386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64 || wasm) && linux

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type port_maskProcessData struct {
	_    structs.HostLayout
	Port uint64
	Comm [16]int8
}

// loadPort_mask returns the embedded CollectionSpec for port_mask.
func loadPort_mask() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Port_maskBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load port_mask: %w", err)
	}

	return spec, err
}

// loadPort_maskObjects loads port_mask and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*port_maskObjects
//	*port_maskPrograms
//	*port_maskMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadPort_maskObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadPort_mask()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// port_maskSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type port_maskSpecs struct {
	port_maskProgramSpecs
	port_maskMapSpecs
	port_maskVariableSpecs
}

// port_maskProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type port_maskProgramSpecs struct {
	ProcessMask *ebpf.ProgramSpec `ebpf:"process_mask"`
}

// port_maskMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type port_maskMapSpecs struct {
	P_data *ebpf.MapSpec `ebpf:"p_data"`
}

// port_maskVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type port_maskVariableSpecs struct {
	ALLOW *ebpf.VariableSpec `ebpf:"ALLOW"`
	BLOCK *ebpf.VariableSpec `ebpf:"BLOCK"`
}

// port_maskObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadPort_maskObjects or ebpf.CollectionSpec.LoadAndAssign.
type port_maskObjects struct {
	port_maskPrograms
	port_maskMaps
	port_maskVariables
}

func (o *port_maskObjects) Close() error {
	return _Port_maskClose(
		&o.port_maskPrograms,
		&o.port_maskMaps,
	)
}

// port_maskMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadPort_maskObjects or ebpf.CollectionSpec.LoadAndAssign.
type port_maskMaps struct {
	P_data *ebpf.Map `ebpf:"p_data"`
}

func (m *port_maskMaps) Close() error {
	return _Port_maskClose(
		m.P_data,
	)
}

// port_maskVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadPort_maskObjects or ebpf.CollectionSpec.LoadAndAssign.
type port_maskVariables struct {
	ALLOW *ebpf.Variable `ebpf:"ALLOW"`
	BLOCK *ebpf.Variable `ebpf:"BLOCK"`
}

// port_maskPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadPort_maskObjects or ebpf.CollectionSpec.LoadAndAssign.
type port_maskPrograms struct {
	ProcessMask *ebpf.Program `ebpf:"process_mask"`
}

func (p *port_maskPrograms) Close() error {
	return _Port_maskClose(
		p.ProcessMask,
	)
}

func _Port_maskClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed port_mask_bpfel.o
var _Port_maskBytes []byte
